//----------------------------------------
// class의 소속 package명 선언
// 모든 java class 상단에는 무조건 소속 package명 선언이 나온다
//----------------------------------------
package java_study;

//----------------------------------------
// Student 라는 이름의 class 선언
// class는 java에서 단위 프로그램의 중의 하나이다
// public: 다른 package에서 사용 가능하다
// 아무것도 없을 경우: 동일한 package에서만 사용 가능하다
//----------------------------------------
public class Student {
	
	//----------------------------------------
	// 속성변수(멤버변수) 선언하기
	//----------------------------------------
	private int stu_no;
	private String stu_name;
	private String jumin_num;
	
	//----------------------------------------
	// 생성자 선언하기
	//----------------------------------------
	public Student(int stu_no, String stu_name, String jumin_num) {
		this.stu_no = stu_no;
		this.stu_name = stu_name;
		this.jumin_num = jumin_num;
	}
	
	//----------------------------------------
	// 메소드 선언하기
	//----------------------------------------
	
	//----------------------------------------
	// 학생 번호를 리턴하는 메소드 선언
	// 이 메소드를 호출한 놈한테는 stu_no 변수 안의 데이터를 
	// 리턴한다 라는 의미에서 메소드 왼쪽에 int를 붙인다.
	//----------------------------------------
	public int getStu_no() {
		//----------------------------------------
		// 속성변수 stu_no 안의 데이터를 리턴하기
		//----------------------------------------
		return this.stu_no;
	}
	
	//----------------------------------------
	// 학생 번호를 매개변수로 입력 받아 속성변수 stu_no 에 저장하는 메소드 선언
	// 속성변수 stu_no에 저장만 하고 이 메소드 호출한 놈한테는 리턴할게 없으므로
	// 메소드 앞에 리턴형은 void 로 설정한다.
	//----------------------------------------
	public void setStu_no(int stu_no) {
		//----------------------------------------
		// 속성변수 stu_no에 메소드의 매개변수 stu_no 안의 데이터를 저장하기
		// 속성변수 명과 매개변수 명이 같은 경우 혼동을 피하기 위해 속성변수 앞에 this.를 붙인다.
		//----------------------------------------
		this.stu_no = stu_no;
	}

	//----------------------------------------
	// 학생 이름을 리턴하는 메소드 선언
	// 이 메소드를 호출한 놈한테는 stu_name 변수 안의 데이터를 
	// 리턴한다 라는 의미에서 메소드 왼쪽에 String를 붙인다.
	//----------------------------------------
	public String getStu_name() {
		return stu_name;
	}

	//----------------------------------------
	// 학생 이름을 매개변수로 입력 받아 속성변수 stu_name 에 저장하는 메소드 선언
	// 속성변수 stu_name에 저장만 하고 이 메소드 호출한 놈한테는 리턴할게 없으므로
	// 메소드 앞에 리턴형은 void 로 설정한다.
	//----------------------------------------
	public void setStu_name(String stu_name) {
		this.stu_name = stu_name;
	}

	//----------------------------------------
	// 주민번호를 리턴하는 메소드 선언
	// 이 메소드를 호출한 놈한테는 jumin_num 변수 안의 데이터를 
	// 리턴한다 라는 의미에서 메소드 왼쪽에 String를 붙인다.
	//----------------------------------------
	public String getJumin_num() {
		return jumin_num;
	}

	//----------------------------------------
	// 주민번호를 매개변수로 입력 받아 속성변수 jumin_num 에 저장하는 메소드 선언
	// 속성변수 jumin_num에 저장만 하고 이 메소드 호출한 놈한테는 리턴할게 없으므로
	// 메소드 앞에 리턴형은 void 로 설정한다.
	//----------------------------------------
	public void setJumin_num(String jumin_num) {
		this.jumin_num = jumin_num;
	}
	
}


/*
==========================================
1. 자바에서 최소 단위 프로그램은?
==========================================
1-1. 클래스(class)
------------------------------------------
- 속성변수(멤버변수), 생성자, 메소드로 구성되어 있다.
------------------------------------------
- 속성변수에는 동료 속성변수/메소드/생성자에서 공용으로 사용할 데이터가 저장된다.
- 메소드에는 실행 코드(실행 구문)가 저장된다.
- 생성자는 객체 생성 시, 단 한 번 호출되는 것으로 외부에서 데이터가 들어온다.
			외부에서 데이터가 들어오지 않으면 메소드의 리턴값은 항상 일정하다.
------------------------------------------
- 클래스는 객체의 전신이다. 즉, 객체를 생성하기 위한 단위 프로그램이다.
------------------------------------------

------------------------------------------
1-2. 인터페이스(interface)
------------------------------------------
- public, static, final 의 성격을 가진 속성변수와 
  public, abstract 의 성격을 가진 메소드로만 구성된 단위 프로그램이다.
<주의> 생성자가 없다.
- 객체 생성 목적으로 만들어지지 않았다.
- 클래스의 설계도 역할을 한다.
------------------------------------------

==========================================
2. void 키워드의 의미
==========================================
메소드명 왼쪽에 나오는 키워드이다.
이 메소드를 호출하는 놈은 어떤 데이터도 선물 받을 수 없어

==========================================
3. int getStu_no(){~} 에서 getStu_no 왼쪽의 int 의미?
==========================================
이 메소드를 호출하는 놈은 int형의 데이터를 선물 받을 수 있어

==========================================
4. return this.stu_no; 의 의미?
==========================================
return this.stu_no; 를 가진 메소드를 호출한 놈은 속성변수 stu_no안의 데이터를 선물 받을 수 있어 

==========================================
5. 생성자 public Student(~){~} 를 생략해도 되는가?
==========================================
생성자는 0개 이상 선언이 가능하다.

5-1. 생성자를 코딩상 생략하면 정말 존재하는 생성자는 0개 인가? 즉 없는가?
코딩상 생성자를 생략하면 자바는 기본 생성자를 넣어준다.
위 클래스에서 생성자를 생략하면 Student(){} 가 컴파일할 때 삽입된다. (디폴트 생성자)
즉, 코딩상 0개 이상이 가능하지만 실존 상 1개 이상이다.
생성자는 없어서는 안될 존재이다.
 */
