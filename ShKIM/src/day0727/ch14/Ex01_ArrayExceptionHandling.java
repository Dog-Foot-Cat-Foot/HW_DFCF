package day0727.ch14;

public class Ex01_ArrayExceptionHandling {

	public static void main(String[] args) {
		
		//------------------------------------------
		// int형 배열 arr 변수 선언, 길이가 5인 int형 배열 생성하여 리턴된 메위주 대입
		//------------------------------------------
		int[] arr = new int[5];
		
		//------------------------------------------
		// try~catch문
		// try{ 예외가 발생할 수 있는 코드 부분 } 
		// catch(처리할 예외 타입 e) { try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분 }
		//------------------------------------------
		try {
			//------------------------------------------
			// 반복문을 실행하며 배열에 저장하려는 값이 개수가 배열 범위를 벗어나도록 설정
			// try-catch문을 사용하지 않는다면 예외가 발생하는 순간에 프로그램이 갑자기 멈춘다.
			//------------------------------------------
			for(int i = 0; i <= 5; i++) {
				arr[i] = i;
				System.out.println(arr[i]);
			}
		} catch(ArrayIndexOutOfBoundsException e) {
			//------------------------------------------
			// 예외가 발생하면 catch 블록 수행
			// <1> 예외 타입 출력
			// 	java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5
			//------------------------------------------
			System.out.println(e);					// <1>
			System.out.println("예외 처리 부분");
		}
		//------------------------------------------
		// 예외가 발생했을 경우 catch문 블록을 수행, 프로그램 종료 출력문 까지 수행된다.
		// try-catch 문을 사용하여 비정상 종료되는 것을 방지하였다.
		//------------------------------------------
		System.out.println("프로그램 종료");
		
		
		/* ========================================
		 * 예외 클래스
		 * 
		 * 오류가 발생하는 상황
		 * 1. 컴파일 오류(compile error) : 프로그램 코드 작성 중 실수로 발생
		 * 		-> 컴파일 오류를 모두 수정해야 프로그램이 정상적으로 실행됨, 문법적으로 오류가 있다는 것을 바로 알 수 있음
		 * 2. 실행 오류(runtime error) : 실행 중인 프로그램이 의도하지 않은 동작을 하거나 프로그램이 중지되는 경우
		 * 		-> 버그(bug) : 프로그램을 잘못 구현하여 의도한 바와 다르게 실행되어 생기는 오류
		 * 	
		 * 로그(log) 분석
		 * 로그? 소프트웨어 실행 중에 발생하는 여러 상황을 기록한 내용, 주로 파일에 기록(로그 파일(=log 1file))
		 * 
		 * 예외 처리를 하는 목적
		 * 일단 프로그램이 비정상 종료되는 것을 방지하기 위한 것
		 * 
		 * 실행 오류(runtime error)의 종류 (Throwable 클래스)
		 * 1. 시스템 오류(error) : 자바 가상 머신에서 발생 (Error 클래스, Throwable 클래스에서 상속받음)
		 * 		-> 사용 가능한 동적 메모리가 없는 경우, 스택 메모리의 오버플로 발생
		 * 		-> 프로그램에서 제어할 수 없음 
		 * 2. 예외(exception) : Exception 클래스, Throwable 클래스에서 상속받음, Exception 클래스 하위의 오류 클래스
		 * 		-> 파일을 읽어 사용하려는데 파일이 없는 경우, 네트워크로 데이터 전송 시 연결 안된 경우, 배열 값을 출력하는데 배열 요소가 없는 경우
		 * 		-> 프로그램에서 제어할 수 있음
		 * ========================================
		 */
		
	}

}
