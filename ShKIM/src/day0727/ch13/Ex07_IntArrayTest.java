package day0727.ch13;

import java.util.Arrays;

public class Ex07_IntArrayTest {

	public static void main(String[] args) {
		
		//------------------------------------------
		// <1> int형 배열 arr 변수 선언, 배열 요소 대입
		// <2> int형 변수 sumVal 선언, sum() 연산으로 arr 배열에 저장된 값을 모두 더하여 리턴된 데이터 대입
		// <3> int형 변수 count 선언, count() 연산으로 arr 배열의 요소 개수를 반환
		//	count() 메서드의 반환 값이 long이므로 int형으로 명시적 형변환하여 대입
		// <4> sumVal의 데이터 출력, 15
		// <5> count의 데이터 출력, 5
		//------------------------------------------
		int[] arr = {1, 2, 3, 4, 5};					// <1>
		
		int sumVal = Arrays.stream(arr).sum();			// <2>
		int count = (int)Arrays.stream(arr).count();	// <3>
		
		System.out.println(sumVal);						// <4>
		System.out.println(count);						// <5>
		
		
		/* ========================================
		 * 스트림(stream)
		 * 여러 자료의 처리에 대한 기능을 구현해 놓은 클래스이다.
		 * 배열, 컬렉션 등의 자료를 일관성 있게 처리할 수 있다.
		 * 자료에 따라 기능을 각각 새로 구현하는 것이 아니라 처리해야 하는 
		 * 자료가 무엇인지와 상관없이 같은 방식으로 메서드를 호출할 수 있기 때문이다.
		 * 
		 * 스트림 연산
		 * ------------------------------------------
		 * 중간 연산 : 자료를 거르거나 변경하여 또 다른 자료를 내부적으로 생성한다.
		 * ------------------------------------------
		 * filter() : 조건을 넣고 그 조건에 맞는 참인 경우만 추출하는 경우에 사용한다.
		 * sList.stream().filter(s -> s.length() >= 5).forEach(s -> System.out.println(s));
		 * 
		 * map() : 클래스가 가진 자료 중 이름만 출력하는 경우에 사용한다.
		 * 	요소들을 순회하여 다른 형식으로 변환하기도 한다.
		 * customerList.stream().map(c -> c.getName()).forEach(s -> System.out.println(s));
		 * 
		 * filter(), map() 둘 다 함수를 수행하면서 해당 조건이나 함수에 맞는 결과를 추출해 내는 중간 역할을 한다
		 * 
		 * ------------------------------------------
		 * 최종 연산 : 생성된 내부 자료를 소모해 가면서 연산을 수행한다. 마지막에 한 번만 호출된다.
		 * 	스트림의 자료를 소모하면서 연산을 수행하기 때문에 최종 연산이 수행되고 나면 해당 스트림은 더 이상 사용할 수 없다.
		 *	결과를 만드는데 주로 사용한다.
		 * ------------------------------------------
		 * forEach() : 요소를 하나씩 꺼내는 기능을 한다
		 * sum(), count() : 배열 요소의 합계를 구하거나 개수를 출력하는 등의 연산을 수행한다.
		 * ========================================
		 */
		
		
	}

}
