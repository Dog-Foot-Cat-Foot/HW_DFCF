package day0727.ch13;

public class Ex04_TestMyNumber {

	public static void main(String[] args) {
		
		//------------------------------------------
		// <1> MyNumber 인터페이스형 max 변수 선언, 람다식을 대입
		//	getMax() 추상 메서드를 입력받은 두 수 중 더 큰 수를 반환하는 기능을 구현
		// <2> 인터페이스형 변수로 메서드 호출
		// 	출력: 20
		//------------------------------------------
		MyNumber max = (x, y) -> (x >= y) ? x : y;		// <1>
		System.out.println(max.getMax(10, 20));			// <2>
		
		
		/* =========================================
		 * 람다식(Lambda expression)
		 * 자바에서 제공하는 함수형 프로그래밍 방식이다.
		 * 자바 8부터 항수형 프로그래밍을 지원한다.
		 * 
		 * 함수형 프로그래밍(Functional Programming; FP)
		 * 프로그래밍 언어 중 함수의 구현과 호출만으로 프로그램을 만들 수 있는 프로그래밍 방식이다.
		 * 순수 함수(pure function)를 구현하고 호출함으로써 
		 * 		외부 자료에 부수적인 영향(side effect)를 주지 않도록 구현하는 방식이다.
		 * 순수 함수? 매개변수만을 사용하여 만드는 함수이다.
		 * 병렬 처리에 적합, 안정되고 확장성 있는 프로그램을 개발할 수 있는 장점이 있다.
		 * 동일한 입력에 대해서는 동일한 출력을 보장, 다양한 자료에 같은 기능을 수행할 수 있다,
		 * 
		 * 람다식 구현하기
		 * 함수 이름이 없는 익명 함수를 만드는 것이다.
		 * (매개변수) -> {실행문;}
		 * 
		 * 람다식 문법
		 * - 매개변수가 하나인 경우 괄호 생략 가능
		 * - 구현 부분이 한 문장인 경우 중괄호 생략 가능(return문이 아닌 경우)
		 * - 구현 부분이 return문 하나라면 중괄호와 return을 모두 생략하고 식만 쓰기 가능
		 * =========================================
		 */

	}

}
